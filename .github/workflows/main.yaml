name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'

    - name: Install dependencies
      run: composer install

    - name: Build front-end assets
      run: |
        npm install
        npm run build

    - name: Copy necessary files
      run: |
        rsync -r --exclude=node_modules --exclude=assets/source /path/to/your/project /path/to/deployment/directory
        
    - name: Deploy to VPS
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.IP }}
        username: ${{ secrets.USER }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
        script: |
          sudo service apache2 stop
          rsync -r /path/to/deployment/directory ${{ secrets.PATH }}


# name: Deploy to VPS

# on:
#   push:
#     branches:
#       - main

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Setup Node.js and Yarn
#         uses: actions/setup-node@v2
#         with:
#           node-version: 14

#       - name: Install Composer and Yarn dependencies
#         run: |
#           composer install --no-interaction --no-progress --prefer-dist
#           yarn install --frozen-lockfile --ignore-scripts

#       - name: Build assets
#         run: yarn build

#       - name: Create deployment archive
#         run: zip -r deployment.zip . -x 'node_modules/*' 'var/*' 'vendor/*'

#       - name: Upload to server
#         uses: wlixcc/SFTP-Deploy-Action@v1.2.4
#         with:
#           remote_path: ${{ secrets.PATH }}
#           server: ${{ secrets.IP }}
#           username: ${{ secrets.USER }}
#           ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
#           password: ${{ secrets.PASSWORD }}
#           sftpArgs: -r
#           port: ${{ secrets.PORT }}
#           local_path: deployment.zip
#       - name: Set Up Symfony Production Environment
#         run: |
#           # Create Doctrine database
#           ssh -i ${{ secrets.SSH_PRIVATE_KEY }} ${{ secrets.USER }}@${{ secrets.SERVER }} "cd ${{ secrets.PATH }} && php bin/console doctrine-database-create --no-interaction"

#           # Run Doctrine migrations
#           ssh -i ${{ secrets.SSH_PRIVATE_KEY }} ${{ secrets.USER }}@${{ secrets.SERVER }} "cd ${{ secrets.PATH }} && php bin/console doctrine:migrations:migrate --no-interaction"

#           # Install Symfony Apache pack
#           ssh -i ${{ secrets.SSH_PRIVATE_KEY }} ${{ secrets.USER }}@${{ secrets.SERVER }} "cd ${{ secrets.PATH }} && composer require symfony/apache-pack"

#           # Dump .env file for production
#           ssh -i ${{ secrets.SSH_PRIVATE_KEY }} ${{ secrets.USER }}@${{ secrets.SERVER }} "cd ${{ secrets.PATH }} && composer dump-env prod"

#           # Install dependencies for production
#           ssh -i ${{ secrets.SSH_PRIVATE_KEY }} ${{ secrets.USER }}@${{ secrets.SERVER }} "cd ${{ secrets.PATH }} && composer install --no-dev --optimize-autoloader"

#           # Clear cache
#           ssh -i ${{ secrets.SSH_PRIVATE_KEY }} ${{ secrets.USER }}@${{ secrets.SERVER }} "cd ${{ secrets.PATH }} && APP_ENV=prod APP_DEBUG=0 php bin/console cache:clear"
